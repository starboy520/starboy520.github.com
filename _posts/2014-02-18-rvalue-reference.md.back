---
layout: post
title:  "Rvalue reference"
date:   2014-02-10 21:41:24
categories: [c++11]
---


#介绍
## 拷贝临时对象
## RVO
## CO

#右值引用
## 引入背景
右值引用是c++标准新加入的一个特性, 当你刚开始接触右值引用时， 最让人疑惑的是不知道右值引用的目的或者说右值引用是用来解决什么问题的。因此，我不会不会直接介绍什么是右值引用。 我会从一些需要解决的问题以及右值引用提供了怎么一种解决方案。而后你就会很自然理解右值引用的定义。

右值引用至少解决了2个问题

1. 实现了move语义 (move semantics)
2. 完美转发 (perfect forwarding)

## 左值与右值

最初c里面的对左值右值的定义： 左值是指一个能在等号左边或者右边的值， 右值是指只能在等号右边的值。简单一点的定义（里面有许多值得讨论的地方): 能对左值取地址， 不能对右值取地址.

<pre>
<code>
    int a = 42;
	int b = 43;
	
	// a and b are both l-values:
	a = b; // ok
	b = a; // ok
	a = a * b; // ok
	
	// a * b is an rvalue:
	int c = a * b; // ok, rvalue on right hand side of assignment
	a * b = 42; // error, rvalue on left hand side of assignment

	// lvalues:
	int i = 42;
	i = 42; // i is a lvalue;
	int* p = &i; // i is a lvalue;
	
	int& foo(); 
	foo() = 32; // ok! foo() is a lvalue;
	
	// rvalue
	int foo_bar();
	int j = 0; 
	j = foo_bar(); // foo_bar is a rvalue;
	// int* p2 = &foo_bar() // error! can not take a address of a rvalue.
</code>
</pre>

如果对一个右值的严格定义有兴趣， 可以参考 [ACCU](http://accu.org/index.php/journals/227) 这篇文章
## 定义与绑定规则
## if-name-rule or universial reference
#move 语义
假设X是一个类， 它又一个叫m_pResource的成员， 因此X的拷贝赋值符号如下
<pre>
X& X::operator=(const X& rhs) {
	// [...]
	// 析构m_pResource指针的资源
	// 赋值 rhs.m_pResource指向的资源， 指向m_pResource
    // [...]
}
</pre>
拷贝构造函数与上面类似.

假设X 如下使用:
<pre>
X foo();
X x;
x = foo();
</pre>
最后一行做了如下事情:

1. 析构x指向的资源
2. 拷贝foo返回的临时资源
3. 析构foo()的临时资源

很明显， 交换x和临时变量foo指向的指针， 然后让临时对象析构x的原始指针 是可以的，而且效率很高。 宗旨，在特殊情况下，如果赋值符号右边是一个右值， 我们要使得拷贝赋值符进行如下操作
<pre>
// [...]
// swap m_pResource rhs.m_pResource
// [...]
</pre>

如上这个叫move语义， 在c++11, 这种情况是通过重载得到的
<pre>
X& X::operator=(<mystery type> rhs)
{
  // [...]
  // swap this->m_pResource and rhs.m_pResource
  // [...]  
}
</pre>

既然是定义的拷贝构造(赋值)函数， 那么 `mystery type` 必须是一个引用， 除此之外， 我还希望`mystery type`有如下行为： 当需要在一个普通的引用和这个`mystery type`做选择的时候， 右值偏向于用`mystery type`, 而左值偏向于普通的引用.

说白了，这边的这个`mystery type`就是右值引用

#完美转发

